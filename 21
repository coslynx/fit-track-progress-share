const express = require('express');
const Post = require('../models/Post');

const socialController = {
  /**
   * @async
   * @description Handles POST requests to create a new social post.
   * @param {express.Request} req - Express request object containing the post content and author.
   * @param {express.Response} res - Express response object for sending back responses.
   * @returns {Promise<void>} - A Promise that resolves when the response is sent.
   */
  createPost: async (req, res) => {
    try {
      // Extract content and author from the request body
      const { content, author } = req.body;

      // Validate input: Ensure content and author are present and are strings within defined limits
      if (!content || typeof content !== 'string' || content.length < 1 || content.length > 500) {
        return res.status(400).json({ message: 'Content must be a string between 1 and 500 characters.' });
      }
      if (!author || typeof author !== 'string' || author.length < 1 || author.length > 50) {
        return res.status(400).json({ message: 'Author must be a string between 1 and 50 characters.' });
      }


        // Sanitize input to prevent XSS attacks
        const sanitizedContent = String(content).replace(/</g, "&lt;").replace(/>/g, "&gt;");
        const sanitizedAuthor = String(author).replace(/</g, "&lt;").replace(/>/g, "&gt;");

      // Create a new post document using the Post model
      const newPost = new Post({
        content: sanitizedContent,
        author: sanitizedAuthor, // Assuming the middleware passes the user id as the author
          timestamp: Date.now()
      });

      // Save the new post to the database
      const savedPost = await newPost.save();

      // Respond with a 201 status code and the created post object
      res.status(201).json(savedPost);
    } catch (error) {
      // Log the error
      console.error('Error creating post:', error);
        // Respond with a 500 status code and a detailed error message
      res.status(500).json({ message: 'Failed to create post. Please try again later.', error: error.message });
    }
  },

  /**
   * @async
   * @description Handles GET requests to retrieve all social posts.
   * @param {express.Request} req - Express request object.
   * @param {express.Response} res - Express response object for sending back responses.
   * @returns {Promise<void>} - A Promise that resolves when the response is sent.
   */
  getPosts: async (req, res) => {
    try {
      // Fetch all posts from MongoDB using the Post model
      const posts = await Post.find().sort({timestamp: -1});

      // Respond with a 200 status code and an array of post objects
      res.status(200).json(posts);
    } catch (error) {
      // Log the error
      console.error('Error fetching posts:', error);
      // Respond with a 500 status code and a detailed error message
      res.status(500).json({ message: 'Failed to retrieve posts. Please try again later.', error: error.message });
    }
  },
};

module.exports = socialController;