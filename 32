// server.js
// This file sets up an Express server to serve as the backend API for the application.

import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { connectDB } from './config/db.js';
import authRoutes from './routes/authRoutes.js';
import goalRoutes from './routes/goalRoutes.js';
import trackingRoutes from './routes/trackingRoutes.js';
import socialRoutes from './routes/socialRoutes.js';
import errorMiddleware from './middleware/errorMiddleware.js';

// Load environment variables from a .env file
dotenv.config();

// Create an Express application
const app = express();

// Configure CORS to allow requests from the frontend origin
// Use a variable from .env if needed, otherwise default to '*'
const corsOptions = {
  origin: process.env.FRONTEND_ORIGIN || '*',
};

app.use(cors(corsOptions));

// Connect to MongoDB using config/db.js
try {
    await connectDB();
    console.log('MongoDB connected successfully.');
} catch (error) {
    console.error('MongoDB connection error:', error);
}


// Initialize Express and use express.json() middleware to parse JSON request bodies
app.use(express.json());


// Mount the routers
app.use('/api/auth', authRoutes);
app.use('/api/goals', goalRoutes);
app.use('/api/tracking', trackingRoutes);
app.use('/api/social', socialRoutes);


// Use the errorMiddleware as a global error handler
app.use(errorMiddleware);


// Define the port for the server, using 5000 as default if not found in env
const port = process.env.PORT || 5000;


// Start the server and log a message indicating it's running
app.listen(port, () => {
  console.log(Server is running on port ${port});
});