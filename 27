const express = require('express');
const { ObjectId } = require('mongodb');
const { Post } = require('../models/Post');
const {validatePostContent} = require('../utils/validators');
const { sanitizeInput } = require('../utils/helpers');

const router = express.Router();

const createPost = async (req, res) => {
    try {
        const { content } = req.body;
      
        if (!content) {
           return res.status(400).json({ message: 'Content is required' });
          }
      
         if(!validatePostContent(content)){
             return res.status(400).json({message:'Content must be a valid string and cannot be empty.'})
         }

         const sanitizedContent = sanitizeInput(content);

        const newPost = new Post({
            content: sanitizedContent,
            user: req.user._id,
            timestamp: new Date(),
        });
        
        const savedPost = await newPost.save();
        res.status(201).json(savedPost);
    } catch (error) {
        console.error('Error creating post:', error);
        res.status(500).json({ message: 'Failed to create post', error: error.message });
    }
};

const getPosts = async (req, res) => {
    try {
        let { page, limit } = req.query;

         page = parseInt(page, 10) || 1;
         limit = parseInt(limit, 10) || 10;

        if (isNaN(page) || page < 1 || isNaN(limit) || limit < 1) {
            return res.status(400).json({ message: 'Invalid page or limit values' });
        }
        
        const skip = (page - 1) * limit;

        const posts = await Post.find()
            .sort({ timestamp: -1 })
             .skip(skip)
             .limit(limit);


        if (!posts || posts.length === 0) {
            return res.status(200).json([]);
        }
        
        res.status(200).json(posts);
    } catch (error) {
        console.error('Error fetching posts:', error);
        res.status(500).json({ message: 'Failed to fetch posts', error: error.message });
    }
};


module.exports = {
    createPost,
    getPosts,
};