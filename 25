// api/middleware/authMiddleware.js
import { Request, Response, NextFunction } from 'express';
import jwt, { JwtPayload } from 'jsonwebtoken';
import { getSecret } from '../../config/auth';

interface CustomRequest extends Request {
  user?: JwtPayload | string;
}

/**
 * Authentication middleware for verifying JWT tokens.
 * @param {Request} req - Express request object.
 * @param {Response} res - Express response object.
 * @param {NextFunction} next - Express next middleware function.
 */
const authMiddleware = async (req: CustomRequest, res: Response, next: NextFunction): Promise<void> => {
  // Extract the token from the Authorization header.
  const authHeader = req.headers.authorization;

  // Check if the Authorization header is present and the token is a valid string.
    if (!authHeader || typeof authHeader !== 'string' || !authHeader.startsWith('Bearer ')) {
        res.status(401).json({ message: 'Unauthorized' });
      return;
  }

    const token = authHeader.substring(7); // Extract token after "Bearer "

  if(!token) {
    res.status(401).json({ message: 'Unauthorized' });
    return;
  }

  try {
    // Attempt to get the JWT secret from the config
    const secret = await getSecret();
    if(!secret) {
        console.error('Error accessing JWT secret.');
        res.status(500).json({ message: 'Internal server error' });
        return;
    }
    // Verify the token using the secret from the configuration.
      const decoded = jwt.verify(token, secret) as JwtPayload;
      // Attach the decoded user information to the request object.
    req.user = decoded;
      // Call next() to proceed to the next middleware or route handler.
    next();

    } catch (error: any) {
    // Handle token verification errors.
      console.error('Token verification failed:', error.message);
      res.status(401).json({ message: 'Unauthorized' });
        return;
    }
};

export default authMiddleware;