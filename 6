import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
import path from 'path';

dotenv.config({ path: path.resolve(__dirname, '../config/.env') });

interface AuthRequest extends Request {
  user?: {
    userId: string;
    email: string;
    // Add other user properties as needed
  };
}


const authMiddleware = (req: AuthRequest, res: Response, next: NextFunction) => {
  const authHeader = req.headers.authorization;

  if (!authHeader) {
    return res.status(401).json({ message: 'Unauthorized: Missing token' });
  }

  const tokenParts = authHeader.split(' ');
  if (tokenParts.length !== 2 || tokenParts[0] !== 'Bearer') {
      return res.status(401).json({ message: 'Unauthorized: Invalid token format' });
  }

  const token = tokenParts[1];
  const jwtSecret = process.env.JWT_SECRET;


  if (!jwtSecret) {
      console.error("JWT Secret is not defined in environment variables.")
    return res.status(500).json({ message: 'Internal server error, JWT_SECRET missing' });
  }


  try {
    const decoded = jwt.verify(token, jwtSecret) as { userId: string; email: string };
    req.user = { userId: decoded.userId, email: decoded.email };
    next();
  } catch (error) {
      console.error("Error verifying token:", error);
       if (error instanceof jwt.TokenExpiredError) {
            return res.status(401).json({ message: 'Unauthorized: Token Expired' });
        } else if (error instanceof jwt.JsonWebTokenError) {
            return res.status(401).json({ message: 'Unauthorized: Invalid token' });
        } else {
            return res.status(401).json({ message: 'Unauthorized: Token verification failed' });
        }
  }
};


export default authMiddleware;