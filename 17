const express = require('express');
const router = express.Router();
const { Post } = require('../models/Post');
const { errorMiddleware } = require('../middleware/errorMiddleware');

// Function to create a social post
router.post('/api/posts', async (req, res, next) => {
  try {
    const { content } = req.body;

    // Input validation
    if (!content || typeof content !== 'string' || content.trim() === '') {
      return res.status(400).json({ message: 'Post content is required and must be a non-empty string' });
    }
    
    // Data sanitization to prevent MongoDB injection and XSS
    const sanitizedContent = String(content).trim(); // Basic trim and string conversion

    // Create new post document
    const newPost = new Post({
      content: sanitizedContent,
    });

    const savedPost = await newPost.save();

    // Respond with the created post data
    res.status(201).json(savedPost);
  } catch (error) {
      console.error("Error creating post:", error);
      next(error);
  }
});

// Function to get social posts with pagination
router.get('/api/posts', async (req, res, next) => {
    try {
      const { limit, page } = req.query;

      const parsedLimit = parseInt(limit, 10);
      const parsedPage = parseInt(page, 10);
    
      if (limit && (isNaN(parsedLimit) || parsedLimit <= 0)) {
         return res.status(400).json({message: 'Limit parameter must be a valid positive number'});
      }
     if (page && (isNaN(parsedPage) || parsedPage < 0)) {
        return res.status(400).json({message: 'Page parameter must be a valid non-negative number'});
     }
      
      const limitValue = parsedLimit || 10; // Default limit to 10
      const pageValue = parsedPage || 0;  // Default page to 0
      const skip = pageValue * limitValue;
   
    const posts = await Post.find().skip(skip).limit(limitValue).sort({createdAt: -1});


        if (!posts || posts.length === 0) {
           return res.status(404).json({ message: 'No posts found' });
         }

      // Respond with the array of post data
      res.status(200).json(posts);
    } catch (error) {
      console.error('Error getting posts:', error);
      next(error);
    }
});


router.use(errorMiddleware);

module.exports = router;