/**
 * @module socialController
 * @description This module handles social post related API requests, providing functionality for creating and retrieving posts.
 */

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const Post = require('../models/Post');
const authMiddleware = require('../middleware/authMiddleware');

const router = express.Router();

router.use(cors());
router.use(express.json());

/**
 * @function createPost
 * @async
 * @description Handles POST requests to /api/posts. Validates input and creates a new social post.
 * @param {express.Request} req - The incoming request object, containing post content in the body.
 * @param {express.Response} res - The outgoing response object.
 * @returns {Promise<void>} - A promise that resolves after handling the request and sending the response.
 * @throws {Error} - If there is any error during the process, returns 500 with an error message.
 */
router.post('/api/posts', authMiddleware, async (req, res) => {
    try {
        const { content } = req.body;
        if (!content || typeof content !== 'string' || content.trim().length === 0) {
            return res.status(400).json({ message: 'Content is required and must be a non-empty string.' });
        }
        if (content.length > 500) {
            return res.status(400).json({ message: 'Content must be less than 500 characters long.' });
        }

        const newPost = new Post({
            content: content.trim(),
            user: req.user._id,
             createdAt: new Date(),
        });

        await newPost.save();
        return res.status(201).json(newPost);

    } catch (error) {
          console.error('Error creating post:', error);
        return res.status(500).json({ message: 'Internal server error' });
    }
});


/**
 * @function getPosts
 * @async
 * @description Handles GET requests to /api/posts. Retrieves all social posts with pagination.
 * @param {express.Request} req - The incoming request object. Query params: page, limit.
 * @param {express.Response} res - The outgoing response object.
 * @returns {Promise<void>} - A promise that resolves after handling the request and sending the response.
  * @throws {Error} - If there is any error during the process, returns 500 with an error message.
 */
router.get('/api/posts', authMiddleware, async (req, res) => {
    try {
          const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
    
        const skip = (page - 1) * limit;
      const posts = await Post.find()
            .skip(skip)
            .limit(limit)
            .sort({createdAt: -1});

        return res.status(200).json(posts);

    } catch (error) {
          console.error('Error getting posts:', error);
        return res.status(500).json({ message: 'Internal server error' });
    }
});



module.exports = router;