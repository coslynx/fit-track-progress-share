import express, { Express, Request, Response, NextFunction } from 'express';
import cors from 'cors';
import * as dotenv from 'dotenv';
import mongoose from 'mongoose';
import { authRoutes } from './routes/authRoutes';
import { goalRoutes } from './routes/goalRoutes';
import { trackingRoutes } from './routes/trackingRoutes';
import { socialRoutes } from './routes/socialRoutes';
import { errorMiddleware } from './middleware/errorMiddleware';


dotenv.config();

const app: Express = express();
const port = process.env.PORT || 5000;
const mongoUri = process.env.MONGO_URI || "mongodb://localhost:27017/fitnesstracker";


const initializeServer = async () => {
  try {
    // Connect to MongoDB
    await mongoose.connect(mongoUri);
    console.log("Successfully connected to MongoDB");

    // Configure Express to use cors
    app.use(cors());

    // Configure Express to use json
    app.use(express.json());
    
    // Mount routes
    app.use('/api/auth', authRoutes);
    app.use('/api/goals', goalRoutes);
    app.use('/api/tracking', trackingRoutes);
    app.use('/api/social', socialRoutes);

     // Global error handling middleware
    app.use(errorMiddleware);


    // Start the server
    app.listen(port, () => {
        console.log(Server is running on port ${port});
    });

  } catch (error:any) {
      console.error("Error during server setup:", error);
        process.exit(1);

  }
};


initializeServer();