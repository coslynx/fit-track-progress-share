// api/server.js
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { connectDB } from './config/db.js';
import authRoutes from './routes/authRoutes.js';
import goalRoutes from './routes/goalRoutes.js';
import trackingRoutes from './routes/trackingRoutes.js';
import socialRoutes from './routes/socialRoutes.js';
import errorMiddleware from './middleware/errorMiddleware.js';

// Load environment variables
dotenv.config({ path: './.env' });

const app = express();

// CORS configuration
const corsOptions = {
    credentials: true,
    origin: process.env.NODE_ENV === 'production' ? process.env.PROD_ORIGIN : '*',
    
};

app.use(cors(corsOptions));


// Connect to MongoDB
try {
    await connectDB();
    console.log("MongoDB connected successfully")
} catch (error) {
    console.error("MongoDB connection error:", error);
    process.exit(1);
}


// Middleware for parsing JSON requests
app.use(express.json());


// Mount API routes
app.use('/api/auth', authRoutes);
app.use('/api/goals', goalRoutes);
app.use('/api/tracking', trackingRoutes);
app.use('/api/social', socialRoutes);


// Error handling middleware
app.use(errorMiddleware);

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(Server is running on port ${PORT});
});