// api/server.js

// Import necessary modules
import express from 'express';  // Import express framework (v4.18.2)
import cors from 'cors'; // Import cors middleware (v2.8.5)
import dotenv from 'dotenv'; // Import dotenv for environment variables (v16.4.1)
import { connectToDatabase } from './config/db.js'; // Import database connection setup
import { auth } from './config/auth.js'; // Import authentication configurations
import authRoutes from './routes/authRoutes.js'; // Import authentication routes
import goalRoutes from './routes/goalRoutes.js'; // Import goal routes
import trackingRoutes from './routes/trackingRoutes.js'; // Import tracking routes
import socialRoutes from './routes/socialRoutes.js'; // Import social routes
import errorMiddleware from './middleware/errorMiddleware.js'; // Import error handling middleware
// Load environment variables from .env file
dotenv.config();

// Create an instance of the Express application
const app = express();

// Enable Cross-Origin Resource Sharing
app.use(cors({
    origin: 'http://localhost:3000',
}));

// Parse incoming JSON requests
app.use(express.json());

// Define a default route
app.get('/', (req, res) => {
    res.json({ message: 'API is running' });
});

// Mount the authentication routes
app.use('/api/auth', authRoutes);

// Mount the goal routes
app.use('/api/goals', auth(), goalRoutes);

// Mount the tracking routes
app.use('/api/tracking', auth(), trackingRoutes);

// Mount the social routes
app.use('/api/social', auth(), socialRoutes);


// Mount error handling middleware after all routes
app.use(errorMiddleware);

// Set the port for the server to listen on from environment or default to 3001
const PORT = process.env.PORT || 3001;

// Handle uncaught exceptions
process.on('uncaughtException', (err) => {
    console.error('There was an uncaught error', err);
     process.exit(1); //terminate the application
});
  
//Handle unhandled rejections
process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

// Function to start the server
async function startServer() {
    try {
        // Connect to MongoDB database
        await connectToDatabase();
        console.log('connected to database');

        // Start the Express server and log a message when it starts
        app.listen(PORT, () => {
             console.log(server started on port ${PORT});
        });
    } catch (error) {
         console.error('Failed to start server due to database error:', error);
         process.exit(1) //terminate the application
    }
}

// Call the startServer function to begin the server process
startServer();