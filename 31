const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { body, validationResult } = require('express-validator');
const User = require('../models/User');
const { JWT_SECRET } = require('../../config/auth');
const { errorMiddleware } = require('../middleware/errorMiddleware');


/**
 * @description Controller for handling user registration.
 * @route POST /api/auth/signup
 * @access Public
 */
const signup = async (req, res, next) => {
  try {
    // Validate inputs
    await Promise.all([
      body('username').notEmpty().withMessage('Username is required').trim().escape().run(req),
      body('email').notEmpty().withMessage('Email is required').isEmail().withMessage('Invalid email format').trim().normalizeEmail().run(req),
      body('password').notEmpty().withMessage('Password is required').isLength({ min: 6 }).withMessage('Password must be at least 6 characters').trim().run(req),
    ]);

    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }


    const { username, email, password } = req.body;

     // Check if the user already exists
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: 'User already exists' });
    }

    // Hash password with 10 salt rounds
    const hashedPassword = await bcrypt.hash(password, 10);


    // Create new user
    const newUser = new User({
      username,
      email,
      password: hashedPassword,
    });

    // Save user to MongoDB
    const savedUser = await newUser.save();


    // Return user data without password and tokens
    res.status(201).json({
      username: savedUser.username,
      email: savedUser.email,
       id: savedUser._id
    });

  } catch (error) {
     next(error);
  }
};


/**
 * @description Controller for handling user login.
 * @route POST /api/auth/login
 * @access Public
 */
const login = async (req, res, next) => {
  try {
      // Validate inputs
    await Promise.all([
      body('email').notEmpty().withMessage('Email is required').isEmail().withMessage('Invalid email format').trim().normalizeEmail().run(req),
      body('password').notEmpty().withMessage('Password is required').trim().run(req),
    ]);


      const errors = validationResult(req);
      if (!errors.isEmpty()) {
          return res.status(400).json({ errors: errors.array() });
      }


    const { email, password } = req.body;

    // Check if the user exists
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: 'Invalid credentials' });
    }


    // Compare provided password with hashed password
    const passwordMatch = await bcrypt.compare(password, user.password);
    if (!passwordMatch) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }

    // Generate JWT token
    const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '1h' });

     // Return user data without password and a JWT token
    res.status(200).json({
        username: user.username,
        email: user.email,
        id: user._id,
        token
    });
  } catch (error) {
    next(error)
  }
};


/**
 * @description Controller for handling user logout.
 * @route POST /api/auth/logout
 * @access Private
 */
const logout = async (req, res, next) => {
    try {
         // Invalidate the token on client side. No backend logic needed for this MVP implementation
         res.status(200).json({ message: 'Logout successful' });
    } catch (error) {
         next(error)
    }
  };


module.exports = {
  signup,
  login,
  logout,
};