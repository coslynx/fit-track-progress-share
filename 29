const express = require('express');
const { StatusCodes } = require('http-status-codes');
const { sanitize } = require('express-validator');
const { body, validationResult } = require('express-validator');
const { authMiddleware } = require('../middleware/authMiddleware');
const { errorMiddleware } = require('../middleware/errorMiddleware');
const { Post } = require('../models/Post');
const { rateLimit } = require('express-rate-limit');

const router = express.Router();

const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // max 100 requests per windowMs
  message: {
    status: StatusCodes.TOO_MANY_REQUESTS,
    message: 'Too many requests from this IP, please try again after 15 minutes'
  },
  standardHeaders: true,
  legacyHeaders: false,
})

router.use(limiter)
router.post(
  '/',
  authMiddleware,
  [body('content').notEmpty().isString().trim().escape()],
  async (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(StatusCodes.BAD_REQUEST).json({
        status: StatusCodes.BAD_REQUEST,
        message: 'Validation failed',
        errors: errors.array(),
      });
    }

    const { content } = req.body;
    const userId = req.user._id;
    const timestamp = new Date();
    try {
       const newPost = new Post({
         userId,
         content,
         timestamp,
       });
      const savedPost = await newPost.save();
      res.status(StatusCodes.CREATED).json(savedPost);
    } catch (error) {
        next(error);
    }
  }
);

router.get('/', authMiddleware, async (req, res, next) => {
    try {
        const posts = await Post.find().sort({ timestamp: -1 });
        res.status(StatusCodes.OK).json(posts);
    } catch (error) {
        next(error);
    }
});


router.use(errorMiddleware);

module.exports = router;