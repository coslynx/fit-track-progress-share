// api/server.js
import express, { Express, Request, Response, NextFunction } from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import mongoose from 'mongoose';
import { authRoutes } from './routes/authRoutes';
import { goalRoutes } from './routes/goalRoutes';
import { trackingRoutes } from './routes/trackingRoutes';
import { socialRoutes } from './routes/socialRoutes';
import { errorMiddleware } from './middleware/errorMiddleware';
import { db } from '../config/db';

dotenv.config();

const app: Express = express();
const port = process.env.PORT || 5000;

// Enable CORS
app.use(cors());
// Parse JSON requests
app.use(express.json());


// Connect to MongoDB
const connectDB = async () => {
    try {
        await db();
        console.log('MongoDB connected successfully.');
      } catch (error: any) {
        console.error('MongoDB connection error:', error.message);
        process.exit(1);
    }
};
connectDB();


// Mount routes
app.use('/auth', authRoutes);
app.use('/goals', goalRoutes);
app.use('/activities', trackingRoutes);
app.use('/posts', socialRoutes);


// Error handling middleware
app.use(errorMiddleware);


// Start the server
const startServer = async () => {
    try {
      app.listen(port, () => {
        console.log(Server is running on port: ${port});
      });
    } catch (error: any) {
        console.error('Server startup error:', error.message);
        process.exit(1);
    }
};
startServer();


process.on('unhandledRejection', (reason: any, promise: Promise<any>) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  });
  
  process.on('uncaughtException', (error: any) => {
    console.error('Uncaught Exception:', error);
  });